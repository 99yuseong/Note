1. inline, block요소 차이와 적용되는 값들
2. <pre></pre>, <xmp></xmp> 태그 차이
3. aria-label, aria
4. fontawesome 사용법

5. flex
- flex-wrap 속성은 flex 컨테이너의 너비를 넘어가면 다음 줄로 요소를 배치하게된다






css 강의

selector(선택자) {
    property(속성): value(값); >>>>declarative(선언부) 
}

Type selector
    지칭하는 선택자.
    html tag들을 바로 입력할 수 있음.
    중괄호 앞에 쓰는 녀석들.

    a {

    }

Class selector
    html에 선언한 class를 지칭하는 선택자.
    단 한번의 선언으로 여러 요소에 디자인을 줄 수 있음.
    한 요소에 여러 개의 클래스를 가질 수 있음.

    .class {

    }

ID selector
    단 한 개만 존재하는 선택자.

    #IdSelector {

    }

*다중으로 선택자를 사용하는 경우
    a.class#IdSelector {
    중간에 공백없이 나온다면 <a></a> & class & Idselector인 1개의 요소를 가르키게 됨.
    (공백이 있으면 아무 변화 없음)
    별개의 요소에 속성을 주고 싶다면 중간에 콤마를 써야함
}
Child Combinators(자식선택자)
    parent > child {

    }
Descendant Combinators(자손선택자)
    parent descendant {
        parent 안에 있는 녀석들을 지칭.
        꼭 자손만이 아니라 자식들도 될 수 있음.
        공백이 있어야함.
    }
Sibling Combinators(형제선택자s)
    selector + Sibling {
        selector 다음으로 나오는 형제 Sibling 요소 1개만 적용.
    }
    selector ~ Sibling {
        selector 다음으로 나오는 형제 Sibling 요소들 모두 적용.
    }
Structural Pseudo-classes(구조적가상클래스선택자)
    element:first-child {
        element들 중 첫번째 녀석에게 적용됨.
        공백 없어야함.
    }
    element:last-child {
        element들 중 마지막 녀석에게 적용됨.
    }
    element:nth-child() {
        element들 중 n번째 녀석에게 적용됨.
        짝수 2n, 홀수 2n-1 등으로 표현 가능.
    }
User Action Pseudo-classes(동적가상클래스선택자)
    element:hover {
        마우스를 위에 올리면 적용할 속성.
    }
    element:focus {
        마우스를 클릭하거나 탭 키를 누른 후에 적용할 속성.
        focus 된 요소를 focus가 바뀌기 전까지 적용됨.
        input 태그에서 값을 입력할 때 사용할 수 있음.
    }
    element:active {
        마우스로 클릭한 동안(클릭하는 순간부터 떼는 순간까지)에 적용할 속성.
    }
    #추가 개념(이건 동적가상클래스선택자인지는 모르겠음)
        a:link {
            방문 전 링크에 적용할 속성.
        }
        a:visited {
            방문 후 링크에 적용할 속성.
        }
선택자 우선순위
    스타일이 적용이 안되면 가장 먼저 확인해봐야 할 값.
    기본적으로 나중에 선언된 값들이 이전의 값들을 덮어버림.
        1st ID
        2nd class Pseudo-class
        3rd Type selector
    
    #rule breaker
        inline style은 다른 값들을 모두 무시하고 적용됨.
        element: value !important; 싹다 무시하고 적용됨.